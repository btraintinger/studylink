datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model School {
  id             Int             @id @unique @default(autoincrement())
  name           String
  domain         String
  departments    Department[]
  admins         Admin[]
  teachers       Teacher[]
  schoolSubjects SchoolSubject[]

  @@map("school")
}

model ClassHasSubject {
  schoolClassId Int           @map("school_class_id")
  subjectId     Int           @map("subject_id")
  schoolClass   SchoolClass   @relation(fields: [schoolClassId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  schoolSubject SchoolSubject @relation(fields: [subjectId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([schoolClassId, subjectId])
  @@index([schoolClassId])
  @@index([subjectId])
  @@map("class_has_subject")
}

model Department {
  id            Int           @id @unique() @default(autoincrement())
  name          String
  longName      String        @map("long_name")
  schoolClasses SchoolClass[]
  school        School        @relation(fields: [schoolId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  schoolId      Int           @map("school_id")

  @@index([schoolId])
  @@map("department")
}

model SchoolClass {
  id              Int               @id @unique() @default(autoincrement())
  name            String
  longName        String            @map("long_name")
  departmentId    Int               @map("department_id")
  department      Department        @relation(fields: [departmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  classHasSubject ClassHasSubject[]
  students        Student[]

  @@index([departmentId])
  @@map("school_class")
}

model SchoolSubject {
  id              Int               @id @unique() @default(autoincrement())
  name            String
  longName        String            @map("long_name")
  schoolId        Int               @map("school_id")
  school          School            @relation(fields: [schoolId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  classHasSubject ClassHasSubject[]
  tutor           TutorOffering[]
  tutorRequest    TutorRequest[]

  @@index([schoolId])
  @@map("school_subject")
}

model Teacher {
  id            Int             @id @unique() @default(autoincrement())
  name          String
  longName      String          @map("long_name")
  schoolId      Int             @map("school_id")
  school        School          @relation(fields: [schoolId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  TutorOffering TutorOffering[]
  TutorRequest  TutorRequest[]

  @@index([schoolId])
  @@map("teacher")
}

model TutorRequest {
  id              Int           @id @unique() @default(autoincrement())
  studentId       Int           @map("student_id")
  student         Student       @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  schoolSubjectId Int           @map("school_subject_id")
  schoolSubject   SchoolSubject @relation(fields: [schoolSubjectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  teacherId       Int           @map("teacher_id")
  teacher         Teacher       @relation(fields: [teacherId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  description String @db.VarChar(1000)
  grade       Int

  @@index([schoolSubjectId])
  @@index([studentId])
  @@index([teacherId])
  @@map("tutor_request")
}

model TutorOffering {
  id              Int           @id @unique() @default(autoincrement())
  studentId       Int           @map("student_id")
  student         Student       @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  schoolSubjectId Int           @map("school_subject_id")
  schoolSubject   SchoolSubject @relation(fields: [schoolSubjectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  teacherId       Int           @map("teacher_id")
  teacher         Teacher       @relation(fields: [teacherId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  description String @db.VarChar(1000)
  grade       Int

  @@index([schoolSubjectId])
  @@index([studentId])
  @@index([teacherId])
  @@map("tutor_offering")
}

model Admin {
  id       Int     @id @unique() @default(autoincrement())
  userId   String  @unique() @map("user_id")
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  schoolId Int?    @unique() @map("school_id")
  school   School? @relation(fields: [schoolId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([userId])
  @@index([schoolId])
  @@map("admin")
}

model Student {
  id            Int             @id @unique() @default(autoincrement())
  schoolClassId Int?            @map("school_class_id")
  schoolClass   SchoolClass?    @relation(fields: [schoolClassId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userId        String          @unique() @map("user_id")
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tutorRequest  TutorRequest[]
  tutorOffering TutorOffering[]

  @@index([schoolClassId])
  @@index([userId])
  @@map("student")
}

model User {
  id                     String    @id @unique @default(cuid())
  name                   String?
  firstName              String?   @map("first_name")
  lastName               String?   @map("last_name")
  email                  String    @unique
  emailVerified          DateTime? @map("email_verified")
  emailVerificationToken String?   @map("email_verification_token")
  passwordResetToken     String?   @map("reset_token")
  password               String
  role                   String
  student                Student?
  admin                  Admin?

  @@map("user")
}
