datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model ClassHasSubject {
  schoolClassId Int           @map("school_class_id")
  subjectId     Int           @map("subject_id")
  schoolClass   SchoolClass   @relation(fields: [schoolClassId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  schoolSubject SchoolSubject @relation(fields: [subjectId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([schoolClassId, subjectId])
  @@index([schoolClassId])
  @@index([subjectId])
  @@map("class_has_subject")
}

model School {
  id          Int          @id @unique @default(autoincrement())
  name        String
  departments Department[]
  admins      Admin[]

  @@map("school")
}

model Department {
  id            Int           @id @unique() @default(autoincrement())
  name          String        @db.VarChar(50)
  schoolClasses SchoolClass[]
  school        School        @relation(fields: [schoolId], references: [id])
  schoolId      Int           @map("school_id")

  @@index([schoolId])
  @@map("department")
}

model SchoolClass {
  id              Int               @id @unique() @default(autoincrement())
  name            String            @db.VarChar(50)
  grade           Int
  departmentId    Int               @map("department_id")
  department      Department        @relation(fields: [departmentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  classHasSubject ClassHasSubject[]
  tutorRequest    TutorRequest[]
  tutorOffering   TutorOffering[]
  student         Student[]

  @@index([departmentId])
  @@map("school_class")
}

model SchoolSubject {
  id              Int               @id @unique() @default(autoincrement())
  name            String            @unique() @map("subject_name") @db.VarChar(50)
  extendedName    String            @unique() @map("extended_subject_name") @db.VarChar(100)
  classHasSubject ClassHasSubject[]
  tutor           TutorOffering[]
  tutorRequest    TutorRequest[]

  @@map("school_subject")
}

model TutorRequest {
  id              Int           @id @unique() @default(autoincrement())
  schoolClassId   Int           @map("school_class_id")
  schoolClass     SchoolClass   @relation(fields: [schoolClassId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  studentId       Int           @unique() @map("student_id")
  student         Student       @relation(fields: [studentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  schoolSubjectId Int           @map("school_subject_id")
  schoolSubject   SchoolSubject @relation(fields: [schoolSubjectId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  description String? @db.VarChar(1000)
  teacher     String? @db.VarChar(50)

  @@index([schoolClassId])
  @@index([schoolSubjectId])
  @@index([studentId])
  @@map("tutor_request")
}

model TutorOffering {
  id              Int           @id @unique() @default(autoincrement())
  schoolClassId   Int           @map("school_class_id")
  schoolClass     SchoolClass   @relation(fields: [schoolClassId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  studentId       Int           @unique() @map("student_id")
  student         Student       @relation(fields: [studentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  schoolSubjectId Int           @map("school_subject_id")
  schoolSubject   SchoolSubject @relation(fields: [schoolSubjectId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  description String? @db.VarChar(1000)
  teacher     String? @db.VarChar(50)

  @@index([schoolClassId])
  @@index([schoolSubjectId])
  @@index([studentId])
  @@map("tutor_offering")
}

model Admin {
  id       Int     @id @unique() @default(autoincrement())
  userId   String  @unique() @map("user_id")
  user     User    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  schoolId Int?    @unique() @map("school_id")
  school   School? @relation(fields: [schoolId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([userId])
  @@index([schoolId])
  @@map("admin")
}

model Student {
  id            Int             @id @unique() @default(autoincrement())
  schoolClassId Int?            @map("school_class_id")
  schoolClass   SchoolClass?    @relation(fields: [schoolClassId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userId        String          @unique() @map("user_id")
  user          User            @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tutorRequest  TutorRequest[]
  tutorOffering TutorOffering[]

  @@index([schoolClassId])
  @@index([userId])
  @@map("student")
}

model User {
  id            String    @id @unique @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  password      String
  role          String
  student       Student?
  admin         Admin?

  @@map("user")
}
