datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model School {
  id              Int               @id @default(autoincrement())
  name            String
  domain          String
  departments     Department[]
  admins          Admin[]
  teachers        Teacher[]
  schoolSubjects  SchoolSubject[]
  rooms           Room[]
  TimeGridElement TimeGridElement[]

  @@map("school")
}

model TimeGridElement {
  id              Int      @id @default(autoincrement())
  weekDay         Int      @map("week_day")
  startTime       Int      @map("start_time")
  endTime         Int      @map("end_time")
  ClassHasSubject Lesson[]
  school          School   @relation(fields: [schoolId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  schoolId        Int      @map("school_id")

  @@index([schoolId])
  @@map("time_grid_element")
}

model Lesson {
  schoolClassId     Int              @map("school_class_id")
  subjectId         Int              @map("subject_id")
  schoolClass       SchoolClass      @relation(fields: [schoolClassId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  schoolSubject     SchoolSubject    @relation(fields: [subjectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  timeGridElement   TimeGridElement? @relation(fields: [timeGridElementId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  timeGridElementId Int?             @map("time_grid_element_id")
  room              Room?            @relation(fields: [roomId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  roomId            Int?             @map("room_id")
  teacher           Teacher?         @relation(fields: [teacherId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  teacherId         Int?             @map("teacher_id")

  @@id([schoolClassId, subjectId])
  @@index([schoolClassId])
  @@index([subjectId])
  @@index([timeGridElementId])
  @@index([roomId])
  @@index([teacherId])
  @@map("class_has_subject")
}

model Room {
  id              Int      @id @default(autoincrement())
  name            String
  schoolId        Int      @map("school_id")
  school          School   @relation(fields: [schoolId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ClassHasSubject Lesson[]

  @@index([schoolId])
  @@map("room")
}

model Department {
  id            Int           @id @default(autoincrement())
  name          String
  longName      String        @map("long_name")
  schoolClasses SchoolClass[]
  school        School        @relation(fields: [schoolId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  schoolId      Int           @map("school_id")

  @@index([schoolId])
  @@map("department")
}

model SchoolClass {
  id              Int        @id @default(autoincrement())
  name            String
  longName        String     @map("long_name")
  departmentId    Int        @map("department_id")
  department      Department @relation(fields: [departmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  classHasSubject Lesson[]
  students        Student[]

  @@index([departmentId])
  @@map("school_class")
}

model SchoolSubject {
  id              Int             @id @default(autoincrement())
  name            String
  longName        String          @map("long_name")
  schoolId        Int             @map("school_id")
  school          School          @relation(fields: [schoolId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  classHasSubject Lesson[]
  tutor           TutorOffering[]
  tutorRequest    TutorRequest[]

  @@index([schoolId])
  @@map("school_subject")
}

model Teacher {
  id             Int             @id @default(autoincrement())
  name           String
  longName       String          @map("long_name")
  schoolId       Int             @map("school_id")
  school         School          @relation(fields: [schoolId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tutorOfferings TutorOffering[]
  tutorRequests  TutorRequest[]
  lessons        Lesson[]

  @@index([schoolId])
  @@map("teacher")
}

model TutorRequest {
  id              Int           @id @default(autoincrement())
  studentId       Int           @map("student_id")
  student         Student       @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  schoolSubjectId Int           @map("school_subject_id")
  schoolSubject   SchoolSubject @relation(fields: [schoolSubjectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  teacherId       Int           @map("teacher_id")
  teacher         Teacher       @relation(fields: [teacherId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  description String @db.VarChar(1000)
  grade       Int

  @@index([schoolSubjectId])
  @@index([studentId])
  @@index([teacherId])
  @@map("tutor_request")
}

model TutorOffering {
  id              Int           @id @default(autoincrement())
  studentId       Int           @map("student_id")
  student         Student       @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  schoolSubjectId Int           @map("school_subject_id")
  schoolSubject   SchoolSubject @relation(fields: [schoolSubjectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  teacherId       Int           @map("teacher_id")
  teacher         Teacher       @relation(fields: [teacherId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  description String @db.VarChar(1000)
  grade       Int

  @@index([schoolSubjectId])
  @@index([studentId])
  @@index([teacherId])
  @@map("tutor_offering")
}

model Admin {
  id       Int     @id @default(autoincrement())
  userId   String  @unique() @map("user_id")
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  schoolId Int?    @unique() @map("school_id")
  school   School? @relation(fields: [schoolId], references: [id], onDelete: SetNull, onUpdate: SetNull)

  @@index([userId])
  @@index([schoolId])
  @@map("admin")
}

model Student {
  id             Int             @id @default(autoincrement())
  schoolClassId  Int?            @map("school_class_id")
  schoolClass    SchoolClass?    @relation(fields: [schoolClassId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  userId         String          @unique() @map("user_id")
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tutorRequests  TutorRequest[]
  tutorOfferings TutorOffering[]

  @@index([schoolClassId])
  @@index([userId])
  @@map("student")
}

model User {
  id                      String    @id @default(cuid())
  name                    String?
  firstName               String?   @map("first_name")
  lastName                String?   @map("last_name")
  email                   String    @unique
  emailVerified           DateTime? @map("email_verified")
  emailVerificationToken  String?   @map("email_verification_token")
  passwordResetToken      String?   @map("reset_token")
  allowEmailNotifications Boolean?  @default(true) @map("allow_email_notifications")
  password                String
  role                    String
  student                 Student?
  admin                   Admin?

  @@map("user")
}
