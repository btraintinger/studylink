datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

model class_has_subject {
  schoolClassId Int @map("school_class_id")
  subjectId      Int @map("subject_id")
  schoolClass    schoolClass   @relation(fields: [schoolClassId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  schoolSubject  schoolSubject @relation(fields: [subjectId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([schoolClassId, subjectId])
  @@index([schoolClassId])
  @@index([subjectId])
}

model School {
  id          Int          @id @unique @default(autoincrement())
  name        String
  departments Department[]
  admins      Admin[]
}

model Department {
  id              Int            @id @unique() @default(autoincrement())
  departmentName String         @db.VarChar(50) 
  school_class    schoolClass[]
  School          School         @relation(fields: [schoolId], references: [id])
  schoolId       Int @map("school_id")

  @@index([schoolId])
}

model schoolClass {
  id                Int                 @id @unique() @default(autoincrement())
  className         String              @db.VarChar(50) @map("class_name")
  grade             Int
  departmentId      Int @map("department_id")
  department        Department          @relation(fields: [departmentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  class_has_subject class_has_subject[]
  tutorRequest     tutorRequest[]
  tutorOffering    tutorOffering[]
  student           Student[]

  @@index([departmentId])
	@@map("school_class")
}

model schoolSubject {
  id                    Int                 @id @unique() @default(autoincrement())
  subjectName           String              @unique() @db.VarChar(50) @map("subject_name")
  extendedSubjectName String              @unique() @db.VarChar(100) @map("extended_subject_name")
  class_has_subject     class_has_subject[]
  tutor                 tutorOffering[]
  tutorRequest          tutorRequest[]
	@@map("school_subject")
}

model tutorRequest {
  id                Int            @id @unique() @default(autoincrement())
  schoolClassId     Int @map("school_class_id")
  schoolClass      schoolClass   @relation(fields: [schoolClassId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  studentId         Int            @unique() @map("student_id")
  student           Student        @relation(fields: [studentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  schoolSubjectId Int @map("school_subject_id")
  schoolSubject    schoolSubject @relation(fields: [schoolSubjectId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  
  description String? @db.VarChar(1000)
  teacher     String? @db.VarChar(50)

  @@index([schoolClassId])
  @@index([schoolSubjectId])
  @@index([studentId])
	@@map("tutor_request")
}

model tutorOffering {
  id                Int            @id @unique() @default(autoincrement())
  schoolClassId   Int @map("school_class_id")
  schoolClass      schoolClass   @relation(fields: [schoolClassId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  studentId        Int            @unique() @map("student_id")
  student           Student        @relation(fields: [studentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  schoolSubjectId Int @map("school_subject_id")
  schoolSubject    schoolSubject @relation(fields: [schoolSubjectId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  description String? @db.VarChar(1000)
  teacher     String? @db.VarChar(50)

  @@index([schoolClassId])
  @@index([schoolSubjectId])
  @@index([studentId])
	@@map("tutor_offering")
}

model Admin {
  id        Int     @id @unique() @default(autoincrement())
  userId   String  @unique() @map("user_id")
  user      User    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  schoolId Int?    @unique() @map("school_id")
  School    School? @relation(fields: [schoolId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([userId])
  @@index([schoolId])
}

model Student {
  id              Int              @id @unique() @default(autoincrement())
  schoolClassId Int @map("school_class_id")
  schoolClass    schoolClass      @relation(fields: [schoolClassId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userId         String           @unique() @map("user_id")
  user            User             @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tutorRequest   tutorRequest[]
  tutorOffering  tutorOffering[]
  rating      Int?


  @@index([schoolClassId])
  @@index([userId])
}

model Account {
  id                String  @id @unique @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @unique @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @unique @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String
  role          String
  image         String?
  accounts      Account[]
  sessions      Session[]
  Student       Student?
  Admin         Admin?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}