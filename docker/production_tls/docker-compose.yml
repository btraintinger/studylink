# not tested yet
version: '3'

services:
  db:
    image: mariadb:latest
    container_name: db
    volumes:
      - db_data:/var/lib/mysql
    expose:
      - 3306
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    restart: always
    networks:
      - backend

  app:
    build:
      context: ../../
      dockerfile: ./docker/production_tls/app/Dockerfile
    container_name: app
    expose:
      - 3000
    depends_on:
      db-migration:
        condition: service_completed_successfully
    environment:
      DATABASE_URL: mysql://${MYSQL_USER}:${MYSQL_PASSWORD}@db:3306/${MYSQL_DATABASE}
      NEXTAUTH_URL: ${DOMAIN}
      NEXT_PUBLIC_DOMAIN: ${DOMAIN}
      JWT_SECRET: ${JWT_SECRET}
      MAIL_HOST: ${MAIL_HOST}
      MAIL_PORT: ${MAIL_PORT}
      MAIL_USER: ${MAIL_USER}
      MAIL_PASS: ${MAIL_PASS}
    restart: always
    networks:
      - backend
      - frontend

  db-migration:
    build:
      context: ../../
      dockerfile: ./docker/shared/db-migration/Dockerfile
    container_name: db-migration
    depends_on:
      db:
        condition: service_started
    environment:
      DATABASE_URL: mysql://${MYSQL_USER}:${MYSQL_PASSWORD}@db:3306/${MYSQL_DATABASE}
    networks:
      - backend

  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
      args:
        - DOMAIN=${DOMAIN}
    container_name: nginx
    ports:
      - 80:80
      - 443:443
    restart: always
    depends_on:
      - app
      - certbot
    volumes:
      - nginx_logs:/var/log/nginx/:rw
      - certbot_conf:/etc/letsencrypt/:ro
      - certbot_www:/var/www/certbot/:ro
    networks:
      - frontend

  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - certbot_conf:/etc/letsencrypt
      - certbot_www:/var/www/certbot
    command: certonly --webroot -w /var/www/certbot --force-renewal --email ${EMAIL} -d ${FQDN} --agree-tos
    restart: always
    networks:
      - frontend

  cert_renewer:
    build: ./cert_renewer
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped
    networks:
      - frontend

volumes:
  db_data:
  nginx_logs:
  certbot_conf:
  certbot_www:

networks:
  backend:
    driver: bridge
  frontend:
    driver: bridge
